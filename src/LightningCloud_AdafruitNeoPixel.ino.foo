#include <Adafruit_NeoPixel.h>

#ifdef __AVR__
	#include <avr/power.h>
#endif

#define DATAPIN 6
#define NUM_PIXELS 8

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)
Adafruit_NeoPixel stick = Adafruit_NeoPixel(8, DATAPIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

int i = 0;

void setup()
{
	stick.begin();
	stick.show(); // Initialize all pixels to 'off'
	stick.setBrightness(50);

	Serial.begin(115200);
	Serial.print("Number of pixels defined: ");
	Serial.println(stick.numPixels());
}

void loop()
{
	Serial.print("The value of i = ");
	Serial.println(i);

	int r = rand() % 100 + 1;
	Serial.print("The random number = ");
	Serial.println(r);

if (i < 2)
	{
		rainbow(20);
		stick.show();
		delay(2000);
		i++;
	}
	else 
	{
		for (int x = stick.numPixels() - 1; x > -1; x--)
		{
			stick.setPixelColor(x, 0, 0, 0);
			stick.show();
			delay(300);
		}
	}
}

/*
void lightningFlash(uint8_t wait)
{
	for (let i = 0; i < Math.randomRange(2, 6); i++)
	{
		light.setAll(0xffffff)
			pause(Math.randomRange(20, 100))
				light.clear()
					pause(Math.randomRange(10, 50))
	}
}
*/

void rainbow(uint8_t wait)
{
	uint16_t i, j;

	for (j = 0; j < 256; j++)
	{
		for (i = 0; i < stick.numPixels(); i++)
		{
			stick.setPixelColor(i, Wheel((i + j) & 255));
		}
		stick.show();
		delay(wait);
	}
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos)
{
	WheelPos = 255 - WheelPos;
	if (WheelPos < 85)
	{
		return stick.Color(255 - WheelPos * 3, 0, WheelPos * 3);
	}
	if (WheelPos < 170)
	{
		WheelPos -= 85;
		return stick.Color(0, WheelPos * 3, 255 - WheelPos * 3);
	}
	WheelPos -= 170;
	return stick.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
